--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1289w[1..0]	: WIRE;
	w_anode1298w[3..0]	: WIRE;
	w_anode1315w[3..0]	: WIRE;
	w_anode1325w[3..0]	: WIRE;
	w_anode1335w[3..0]	: WIRE;
	w_anode1345w[3..0]	: WIRE;
	w_anode1355w[3..0]	: WIRE;
	w_anode1365w[3..0]	: WIRE;
	w_anode1375w[3..0]	: WIRE;
	w_anode1387w[1..0]	: WIRE;
	w_anode1394w[3..0]	: WIRE;
	w_anode1405w[3..0]	: WIRE;
	w_anode1415w[3..0]	: WIRE;
	w_anode1425w[3..0]	: WIRE;
	w_anode1435w[3..0]	: WIRE;
	w_anode1445w[3..0]	: WIRE;
	w_anode1455w[3..0]	: WIRE;
	w_anode1465w[3..0]	: WIRE;
	w_data1287w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode1465w[3..3], w_anode1455w[3..3], w_anode1445w[3..3], w_anode1435w[3..3], w_anode1425w[3..3], w_anode1415w[3..3], w_anode1405w[3..3], w_anode1394w[3..3]), ( w_anode1375w[3..3], w_anode1365w[3..3], w_anode1355w[3..3], w_anode1345w[3..3], w_anode1335w[3..3], w_anode1325w[3..3], w_anode1315w[3..3], w_anode1298w[3..3]));
	w_anode1289w[] = ( (w_anode1289w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1298w[] = ( (w_anode1298w[2..2] & (! w_data1287w[2..2])), (w_anode1298w[1..1] & (! w_data1287w[1..1])), (w_anode1298w[0..0] & (! w_data1287w[0..0])), w_anode1289w[1..1]);
	w_anode1315w[] = ( (w_anode1315w[2..2] & (! w_data1287w[2..2])), (w_anode1315w[1..1] & (! w_data1287w[1..1])), (w_anode1315w[0..0] & w_data1287w[0..0]), w_anode1289w[1..1]);
	w_anode1325w[] = ( (w_anode1325w[2..2] & (! w_data1287w[2..2])), (w_anode1325w[1..1] & w_data1287w[1..1]), (w_anode1325w[0..0] & (! w_data1287w[0..0])), w_anode1289w[1..1]);
	w_anode1335w[] = ( (w_anode1335w[2..2] & (! w_data1287w[2..2])), (w_anode1335w[1..1] & w_data1287w[1..1]), (w_anode1335w[0..0] & w_data1287w[0..0]), w_anode1289w[1..1]);
	w_anode1345w[] = ( (w_anode1345w[2..2] & w_data1287w[2..2]), (w_anode1345w[1..1] & (! w_data1287w[1..1])), (w_anode1345w[0..0] & (! w_data1287w[0..0])), w_anode1289w[1..1]);
	w_anode1355w[] = ( (w_anode1355w[2..2] & w_data1287w[2..2]), (w_anode1355w[1..1] & (! w_data1287w[1..1])), (w_anode1355w[0..0] & w_data1287w[0..0]), w_anode1289w[1..1]);
	w_anode1365w[] = ( (w_anode1365w[2..2] & w_data1287w[2..2]), (w_anode1365w[1..1] & w_data1287w[1..1]), (w_anode1365w[0..0] & (! w_data1287w[0..0])), w_anode1289w[1..1]);
	w_anode1375w[] = ( (w_anode1375w[2..2] & w_data1287w[2..2]), (w_anode1375w[1..1] & w_data1287w[1..1]), (w_anode1375w[0..0] & w_data1287w[0..0]), w_anode1289w[1..1]);
	w_anode1387w[] = ( (w_anode1387w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1394w[] = ( (w_anode1394w[2..2] & (! w_data1287w[2..2])), (w_anode1394w[1..1] & (! w_data1287w[1..1])), (w_anode1394w[0..0] & (! w_data1287w[0..0])), w_anode1387w[1..1]);
	w_anode1405w[] = ( (w_anode1405w[2..2] & (! w_data1287w[2..2])), (w_anode1405w[1..1] & (! w_data1287w[1..1])), (w_anode1405w[0..0] & w_data1287w[0..0]), w_anode1387w[1..1]);
	w_anode1415w[] = ( (w_anode1415w[2..2] & (! w_data1287w[2..2])), (w_anode1415w[1..1] & w_data1287w[1..1]), (w_anode1415w[0..0] & (! w_data1287w[0..0])), w_anode1387w[1..1]);
	w_anode1425w[] = ( (w_anode1425w[2..2] & (! w_data1287w[2..2])), (w_anode1425w[1..1] & w_data1287w[1..1]), (w_anode1425w[0..0] & w_data1287w[0..0]), w_anode1387w[1..1]);
	w_anode1435w[] = ( (w_anode1435w[2..2] & w_data1287w[2..2]), (w_anode1435w[1..1] & (! w_data1287w[1..1])), (w_anode1435w[0..0] & (! w_data1287w[0..0])), w_anode1387w[1..1]);
	w_anode1445w[] = ( (w_anode1445w[2..2] & w_data1287w[2..2]), (w_anode1445w[1..1] & (! w_data1287w[1..1])), (w_anode1445w[0..0] & w_data1287w[0..0]), w_anode1387w[1..1]);
	w_anode1455w[] = ( (w_anode1455w[2..2] & w_data1287w[2..2]), (w_anode1455w[1..1] & w_data1287w[1..1]), (w_anode1455w[0..0] & (! w_data1287w[0..0])), w_anode1387w[1..1]);
	w_anode1465w[] = ( (w_anode1465w[2..2] & w_data1287w[2..2]), (w_anode1465w[1..1] & w_data1287w[1..1]), (w_anode1465w[0..0] & w_data1287w[0..0]), w_anode1387w[1..1]);
	w_data1287w[2..0] = data_wire[2..0];
END;
--VALID FILE
